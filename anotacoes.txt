em funcao tradicional o this varia dependendo de quem chama

this não varia quando usa arrow function

padrão de projeto mais usado na web é o observer, ou popularmente callback

Frameworks Node, aula 130

http://expressjs.com/
https://sailsjs.com/
https://koajs.com/


Aulas 131 e 132 Express, padrão chain of responsability, middleware

Aula 137 temporizadores
npm i --save node-schedule@1.3.0 -E


Aula 154 - Protocolo HTTP
opera na camada de aplicação, na stack TCP/IP
É um protocolo stateless, não tem estado, toda conexão é com se fosse a primeira vez
protocolo cliente-servidor
retorna conteúdos HTML, CSS, JS, Mídias...

HTTP métodos: GET, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, HEAD

CDN Content Delivery Networks

requisição tipo get: url e parametros

https://www.google.com/search?q=web+moderno&hl=pt-BR
https://www.google.com/search?q=linux&hl=en-US

REQUISIÇÃO DO TIPO GET
HTTP Request
head {
    GET /search?q=web+moderno&hl=pt-BR HTTP/1.1
    host: www.google.com.br
}
body {}

REQUISIÇÃO DO TIPO POST
HTTP Request
head {
    POST /sigin HTTP/1.1
    host: accounts.google.com.br
}
body {
    continue=https%48499...&service=mail&rm=false&ltmpl=default&scc=1&cc=1&ss=1&osid=1
    &emr=1&f.req=%5B%22fulano%40gmail.com
}


GRUPOS DE STATUS HTTP
* 1XX - Informação
* 2XX - Sucesso
* 3XX - Redirecionamento
* 4XX - Erro no Cliente
* 5XX - Erro no Servidor


Aula 155 Servidor web
Apache, Tomcat, JBoss, Microsoft ISS, NodeJS NGiNX

Golang tem um servidor web na linguagem

Web Server e virtual hosting com vários sites
Web Server, estrutura de pastas
    imagens
    CSS
    JS
    index.HTML
    about.HTML


Web stack
_________________________
|       linguagem       |   PHP         ------->|
|_______________________|                       |
|   web Server  |   DB  |   Apache | MySQL ---->|------> LAMP
|_______________|_______|                       |
| Sistema Operacional   |   Linux       ------->|
|_______________________|


Aula 158 - HTML, CSS e JS
HTML        ->  estrutura
CSS         ->  estilo
JavaScript  ->  comportamento

Aula 159 DNS

DNS Records
* A     - IPv4
* AAAA  - IPv6
* MX    - Servidor de Email
* NS    - Servidor DNS
* CNAME - Canonical Name (Apelido)

Aula 160 HTTP Seguro HTTPS

HTTP + TLS (Transport Layer Security Protocol) - (SSL v4)
HTTP + SSL (Secure Sockets Layer Protocol)

"Certificado usado com SSL/TLS" em invés de "Certificado SSL/TLS"

-Criptografa URL, cookies e headers
-Usa certificados digitais

Let's Encrypt (Autoridade Certificadora Free)
https://letsencrypt.org/


Aula 161 Web Service

- Simple Object Access Protocol (SOAP)
    WSDL XML RPC , burocrático pra kct!

- Representational State Transfer (REST)
    JSON, HTTP, Simples

URL             |   MÉTODO  |   DESCRIÇÃO
---------------------------------------------------------
/clientes       |   POST    |   Novo cliente            |
/clientes       |   GET     |   Obtém todos             |
/clientes/36    |   GET     |   Obtém cliente 36        |
/clientes/12    |   PUT     |   Atualiza cliente 12     |
/clientes/41    |   DELETE  |   Exclui cliente 41       |
---------------------------------------------------------


Arquiteturas: SOA e Microserviços

########################################################################3

Aula 190 Seletores CSS #01

:Pseudo-Class   ::Pseudo-Elementos

Combinar Seletores:

DIV + P : Adjacent sibling
DIV ~ P : General sibling
    Maria é uma irmã adjacente a Pedro (DIV + P), porém
    Ana não é adjacente a Maria, logo Ana é irmã geral (DIV ~ P) de Maria

            <ol id='aprovados' class='tag'>
                <li>Maria</li>
                <li>Pedro</li>
                <li>Ana</li>
            </ol>


DIV > P : Child
    a tag <div class="tag"> é filha direta (DIV > P) da tag <div id='aninhado'...>
    porém <section...> não é um filho direto 
            <div id='aninhado' class='tag'>
                <div class="tag">
                    <section class='tag'>
                        <span class='tag'>1</span>
                        <p class='tag'>2</p>
                        <span class='tag'>3</span>
                    </section>
                </div>
            </div>

DIV P : Descendant
    qualquer <span...> que esteja dentro de <div id='aninhado'...>
    pega os elementos <span class='tag'>1</span> e <span class='tag'>3</span>

            <div id='aninhado' class='tag'>
                <div class="tag">
                    <section class='tag'>
                        <span class='tag'>1</span>
                        <p class='tag'>2</p>
                        <span class='tag'>3</span>
                    </section>
                </div>
            </div>

DIV , P : aplica CSS a diferentes elementos, independente de relacionamento

Aula 192 especifidade CSS
        /* https://developer.mozilla.org/pt-BR/docs/Web/CSS/Specificity */
        /*
            Em linhas gerais: NaN NaN NaN;

            1. regra com !important (evitar usar)
            2. seletores mais específicos
            3. última regra processada (empate)
        */


Aula 193 especificade CSS 2
        /* https://specificity.keegan.st/ */
        /*
            1. Inline
            2. ID
            3. Classe, Pseudo-Classe, atributo
            4. Elemento, Pseudo-Elementos
        */

Aula 194 Herança CSS
https://fonts.google.com/


Aula 195 Box model
padding: a , aplica no topo, embaixo, direita e esquerda
padding: a a; aplica no topo e depois na direita, aplica embaixo depois da esquerda
padding: a a a a; topo, direita, embaixo, esquerda (sentido horário)


Aula 204 Cores

            https://www.w3schools.com/colors/colors_hsl.asp
            
            https://coolors.co/
            http://paletton.com/

Aula 205 Unidades

Absolutos: px, cm, mm

Relativos:
    Viewport (tamanho da página): vh, vw, vmin, vmax
        ex: 10 vh = 10% da altura inteira
            20 vw = 20% da largura inteira
    Font: rem (relativo), em (baseada na tag pai)

Utilizar unidades-relativas, boa prática


Aula 221
https://caniuse.com/#feat=css-grid


####################################################
DOM Document Object Model

Aula 230 Acessando atributos

const img = document.querySelector('img')   # seleciona uma tag
const img = document.querySelector('.img')   # seleciona uma classe
const img = document.querySelector('#img')   # seleciona um id
const img = document.querySelector('[img]')   # seleciona uma propriedade

// https://www.w3schools.com/jsref/prop_node_nodetype.asp

####################################################
AJAX Aula 248 
Asynchronous JavaScript And XML (AJAX)

- É uma técnica usada com JavaScript
- Atualiza a página (ou parte dela) sem recarregar (reload)
- Comunica de forma assíncrona com um Servidor Web, ou seja, envia e recebe dados em background
- Usa muito... Callback, Promise, Async/Await

####################################################
Aula 252 XMLHttpRequest #03
https://www.w3schools.com/xml/dom_http.asp

readyState	    Holds the status of the XMLHttpRequest. Changes from 0 to 4: 
                0: request not initialized 
                1: server connection established
                2: request received 
                3: processing request 
                4: request finished and response is ready

####################################################
Aula 260 O que é Gulp?
https://gulpjs.com/

Aula 261 Instalação
npm i -g gulp-cli

comando gulp necessita de um arquivo gulpfile.js


https://babeljs.io/


####################################################
Aula 264 Typescript

http://www.typescriptlang.org/

####################################################
Aula 266 SASS

https://sass-lang.com/

####################################################
Aula 272 Gulp
# Gerar build
npm run build
# Executar servidor
npm start

####################################################
Aula 273 Webpack
Sistema baseado em módulos
https://webpack.js.org/


Regex 101
https://regex101.com/

####################################################
Aula 301 Bootstrap

Duas dependencias: jQuery e Popper
cd bootstrap/exercicios
npm i --save-dev jquery@3.3.1 -E 
npm i --save-dev popper.js@1.14.3 -E 

-E = versão exata

Executar:
npm start

####################################################
Aula 302

https://getbootstrap.com/

####################################################
Aula 304 Tipografia

https://wrapbootstrap.com/

####################################################
Aulas 325 a 332 - Projeto Galeria

instalar dependencias:
npm i

executar:
npm start

####################################################
Aula 333 REACT

# instalando de forma global
npm i -g create-react-app

# criando o projeto
create-react-app exercicios

# acessando e executando
cd exercicios
yarn start ou npm start

####################################################
Aula 335

Nomes de componentes criados devem começar com letra MAIUSCULA
Boa prátiva: arquivos JSX com primeira letra em MAIUSCULA também

####################################################
Aula 337

this.props são atributos somente para a leitura
this.state podem ser modificados

quem manda na renderização é o status do componente e não os componentes da typescriptlang

####################################################
Aulas 339 e 340 Componentes pai e filho

####################################################
Aula 341 Projeto calculadora

create-react-app calculadora

####################################################
Aula 342 - Gradientes

https://uigradients.com

####################################################
Aula 343 - Variáveis em CSS

:root {
    --bg-button: #f0f0f0;
    --border-button: solid 1px #888;
}

.button {
    font-size: 1.4em;
    background-color: var(--bg-button);
    border: none;
    border-right: var(--border-button);
    border-bottom: var(--border-button);
}

####################################################
Aula 344 - Componente Display


####################################################
Aula 348 - Projeto Backend (JSON Server)
json server

npm init -y
npm i --save json-server@0.13.0 -E

# em package.json...
"scripts": {
    "start": "json-server --watch db.json --port 3001"
  },

npm start

####################################################
Aula 349 - Criando projeto Frontend

create-react-app frontend


# dependencias adicionais
"dependencies": {
    "axios": "0.18.0",
    "bootstrap": "4.1.1",
    "font-awesome": "4.7.0",
    "react-router": "4.2.0",
    "react-router-dom": "4.2.2",

cd frontend/
npm i

####################################################
Aula 350


####################################################